//Start of AI:

//rambling ideas:
//white edges. intuitive. edges 0-4 will flop in from 5-9, watch polarity.
//for corners find out what floor 1-4 theyre on
//for first step, whole cube is unsolved we can rotate without bad consequences, but later we will need to know how to stick to the bottom half and gray layer for scratch temp space, without affecting anything. or at least switch to non-destructive forwarding
//for next step we need to move-out with a human-algo
//white corners 0-4 will drop in from 5-9
//to affect a piece, we query the &Pieces for which 2 or 3 faces its claimed by. Add a stat to track this.
//Level 3 corners can be flipped color easily, follow this, they use the bottom side layers and level 5 corners to temp-hold them in 3 moves - 5 moves.
//NO=Pathways will be defined as the 5 Z-lines going from white to gray corner Line covers 3 edges. 5 lines * 3 = 15. Plus the top/bottom lines = 5 * 2 = 10, + 15, = 25 the 5 extra edges to make 30 happen in the 10-wide 4th layer and need not be worried about.

//More Concrete Rough Outline:

//Layer 1: White Face:  White Edges, White Corners.
//Do the same thing as below, but with the Edges first, intuitively moving them in.
//We can do either, but presumably it will be harder to jump the edges over the corners afterwards.
//one by one, find all white corners. Move any in the white face OUT and move ALL of them to the middle "W" layer 3/5,
// preferably right above its face and position. so you can insert it down and in by RDR'D' move or whatever.
//Has to be color flipped. Can be avoided if placed on the W the right way.
//Position it in the right spot:
//BUILD A PIECE SWAPPER that acts like .swapdata(edge->data) but goes through the rotations. It needs to know obviously,
// source and dest Piece, which can be given and assigned by Piece Index #. This system has only recently been used for the algorithms above, highYmiddleW(),
// for example: the concept of assigning semantic names to these arbitrary human combinations of pieces. (These can be named constexpr later)
// To avoid all the conflicts we had with Swap, we need to check first and make sure any source pieces are not in any dest slots, if there are, move them OUT (to anywhere above/below the solved layer boundary).
//Good idea: Think about Linear pathway lines that the blocks travel around on. These are made from a known number of fixed points, the corner's outer tips. These represent train stations aka stops along a train track.
//Once the piece has been confirmed as on the track (hoisted up or intersected with it from another route) - we can compute how many stops it needs to travel to its destination.
//From there we can use a TTL routing protocol to forward the block as if it were a packet across the pathway line.
//That way we can make a decision on whether to take a color flip detour before we get to the end or not.
//Once the pathways are defined, the pieces can be scored and ranked on how far away they are from their destination. Farther ones should be more aggressively moved toward their destination as an optimization.
// ://www.jaapsch.net/puzzles/megaminx.htm for a more list of notations.

//Layer 2: Edges,One at a time, If any of the 5 pieces that are supposed to be in this #2 edge slot, move them OUT, and to the W layer.
//Position it in the right spot, the source location decides the destination drop-in:
//Execute the known, human algo Layer 2 Edge Star Left/Right if its Left or right.
//Find desired edge piece, surf it around to the gray layer, then back down to the top of the star either to the left or the right of dropping it into place.
//Drop in procedure: Move star-top away from the drop-in location, then spin the R/L side UP (the side thats opposite of the star-top turn-away direction) (up is either CW or CCW depending on the side) and then rotate both back
// this will group the correct edge to the correct the corner, above the drop-in location. A second similar drop-in move is needed, likely "u r U' R' " or "u l U' L' "
//3rd layer Corners = Low Y's involve flipping the puzzle upside down, white face on top, and positioning the desired piece on the bottom layer, then swiveling the bottom face around to orient it,
// and then rotating it up and into the Low Y. since the entire rest of the puzzle is unsolved, this can be done intuitively, just rotate the piece on the bottom until its colored correctly, then drop it in.

//Layer 3: Corners Like layer 1 and we use the gray layer as the temp layer
//Layer 4: Edges, since We know the all the Star/edges algo for 2/4/6. Left/Right needs to be decided on the destination this time,
// the source is always at 12 o clock. drops into either 5 / 7 o'clock (Right/Left)
//Pieces already in the layer 4 area but wrong in location need to be moved up and out onto the Gray face as temporary, using Algos.
//Any pieces on the gray face need to be Color-flipped favorably before the drop-in.  we'd need to change the color
//We can also possibly solve some Layer 6 edges now without hurting anything, which helps because some of our source pieces may be there.

//Layer 5: Corners, again. This time they source from Gray layer 7 as the drop-in point. We should find one that exists up on that top layer that can be dropped in.
// otherwise we will have to hoist the pieces up from below. We will have to do this anyway. Theoretically you can pick any piece to start, hoist it up, then drop it in. Then repeat until you've finished.
// But there should be some already up there, and if we Look for them as they come around, and solve those next, more will be solved this way.
//When they are ready to drop in, the colors can be one of 3 ways, and this can be accomplished by either 1, 3 or 5 R/D moves

//Layer 6: Edges source from Gray layer 7 and drop in a short 1/5th sideways. same idea applies from Layer#4
// the source is always at 12 o clock. drops into either 3 / 9 o'clock (Right/Left)

//Layer 7: alternate idea maybe do Corners first, because some of the corner algos affect the edges also, and some of the edge algos affect the corners, so those can be used too...
// So do corners with the intention of corrupting the edges but making ultimate progress on getting the edges all facing downwards at least.
//Coloring the corners involves multiple moves of R/D/R'/D' until they color correctly. This corrupts the lines you use for the transformation, "Z",
// Repeats and reverts in cycles of 6. So after one corner is solved, the temporary lines may still be corrupted, if they are,
// you must rotate the Top/Gray again and continue to color-flip additional Top corners to revert the corrupted "Z" line before you move on.
// This may approach a catch 22, where everything is solved but only one gray corner is 1 flip away, if this is the case, I don't know what to do...
//Theres a lot of last-layer algorithms to choose from. Choose wisely!
//
//DONE: Introduced new 0-30 swap instead of 0-60 with pairs

//some LAYER 7 SOLVE TACTICS:
Last Layer includes both sides of the edge and all corners.    
/*---------- PSEUDOCODE ----------------
EDGES = (first phase one):
    Start finding out which Edges are OK
    OK means multiple correct pieces in order, or  1 piece's color facing correctly (gray),
    Does it Need to be rotated? must be considered...
    if 0/5, find how many colors are gray,
    If solved 1/5, find out which piece and try to solve the adjacent piece to it next.
    If solved 2/5 find out if #2 is attached? NO: If not, why? are they 3 away? Choose a three-way-opposite Algo
                                                YES: Choose a three-ina-row Edge+/Corner rotate algo, ie: algo #11
    If solved >=3/5 find out if #3 is attached?: NO: IDK
                                                    YES: ie: Algo #206 to invert the other 2 corners
    Can go from 2/5 to all 5/5 at once OR go from 3/5 to 5/5.
CORNERS = (phase two) :
    Corners must keep the edges in place, we will know solved rotation by having the offby = 0 as a query to solved findEdges above.
    If solved 1 / 5, determine if better to skip and start at 0 or continue with this.
    1pt2 : check next piece, find out if its capable of being moved in 1 move, or if its 2 moves.
    If solved 2 / 5, find out if they are attached : NO: If not, why ? are they 3 away ? we have no three - way - opposite algo, must give up, go back to 1.
    YES : Choose right three - in - a - row corner - only algo
    If solved 3 / 5, find out if they are attached : NO: If not, proceed to next.
    YES : Choose right three - way corner - only algo
    Algo Choice:
    // Algo 6 and 7 operate on corners only, but both in the same direction - just different face of reference. so no point having both.
       chose algo 7 because front-face=safe is easier. use algo 27 to reverse motion of 7.
    //Last Layer Step 4: Orientating (color-flipping) the Corners. (gray on top)
        //You repeat this over and over with all corners until they are all orientated correctly.
        //identity function repeats every 6x. Each gray color will take 2x cycles to colorflip. It will dis-align the R and D faces temporarily.
*/





 /*TEMPORARY DOCUMENTATION OF SOLVE DIRECTIONS:
//TestCube28-1 (15 19 18 17 16) --> "19 18 15 17 16" below.
//TestCube27-1 (19 18 15 17 16) --> "18 15 19 17 16" below.
//TestCube25-1 (18 15 19 17 16) --> "15 16 19 17 18" below.
//TestCube26-2 (17 16 19 18 15) --> "15 16 19 17 18" below.
//TestCube25-2 (17 18 16 19 15) --> "18 16 17 19 15" below.
//TestCube22-3 (15 18 17 19 16) --> "18 16 17 19 15" below.
//TestCube20-2 (15 19 17 16 18) --> 
//TestCube18-1 (17 18 19 15 16) -->
               (15 18 19 16 17) -->
//             (19 17 18 15 16) -->
//             (16 19 18 15 17) -->
//             (17 15 18 19 16) -->
//             (18 19 17 15 16) --> "19 16 17 15 18" below
               (15 16 18 19 17) final
               (15 16 19 17 18) final
//             (18 16 17 19 15) final
//             (19 16 17 15 18) final
               (16 19 17 18 15) final
               (19 15 17 18 16) final
               (17 15 16 18 19) final
*/
//Only 20 Permutations taken into account. 
//There are 120. This is the wrong way to go about it.

//Solved with at least two pieces:
15,16,17,18,19  ***** yes
15,16,17,19,18  ***--
15,16,18,17,19  **--*
15,16,18,19,17  **--- yes
15,16,19,17,18  **--- yes
15,16,19,18,17  **---
15,17,16,18,19  *--**
15,17,18,16,19  *---* yes
15,18,16,17,19  *---* yes
15,18,17,16,19  *---*
15,19,17,18,16  --**-
16,15,17,18,19  --***
16,17,15,18,19  ---** yes
16,19,17,18,15  --**- yes
17,15,16,18,19  ---** yes
17,16,15,18,19  ---**
18,16,17,15,19  -**--
18,16,17,19,15  -**-- yes
19,15,17,18,16  --**- yes
19,16,17,15,18  -**-- yes
19,16,17,18,15  -***-