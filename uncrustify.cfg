## Tabs
## -------------------------------------------------------------------------------------------------
## Always use 4 spaces

input_tab_size          = 4
output_tab_size         = 4

indent_with_tabs        = 0

# Comments that are not a brace level are indented with tabs on a tabstop.
# Requires indent_with_tabs        = 2. If false, will use spaces.
indent_cmt_with_tabs    = false

# Whether to use tabs for aligning
align_with_tabs         = false

# Whether to keep non-indenting tabs
align_keep_tabs         = false

# Whether to bump out to the next tab when aligning
align_on_tabstop        = false


## Indenting
## -------------------------------------------------------------------------------------------------

# The number of columns to indent per level.
# Usually 2, 3, 4, or 8.
indent_columns          = 4

# The continuation indent. If non-zero, this overrides the indent of '(' and '=' continuation indents.
# For FreeBSD, this is set to 4. Negative value is absolute and not increased for each ( level
indent_continue         = 2

# header files should not be left justified
indent_class        = true


## Parentheses
## -------------------------------------------------------------------------------------------------

# Controls the indent of a close paren after a newline.
# 0: Indent to body level
# 1: Align under the open paren
# 2: Indent to the brace level
indent_paren_close      = 2


## Preprocessor
## -------------------------------------------------------------------------------------------------

# Control indent of preprocessors inside #if blocks at brace level 0
pp_indent                   = remove    # ignore/add/remove/force

# indent pp at code level
pp_indent_at_level          = true
pp_define_at_level          = true

# Control whether to indent the code between #if, #else and #endif when not at file-level
pp_if_indent_code           = false

# # Align macro functions and variables together
align_pp_define_together    = false

# The minimum space between label and value of a preprocessor define
align_pp_define_gap         = 1

# The span for aligning on '#define' bodies (0=don't align)
align_pp_define_span        = 2

# Add or remove space around preprocessor '##' concatenation operator. Default=Add
sp_pp_concat                = add       # ignore/add/remove/force

# Add or remove space after preprocessor '#' stringify operator. Also affects the '#@' charizing operator.
sp_pp_stringify             = ignore    # ignore/add/remove/force

# Add or remove space before preprocessor '#' stringify operator as in '#define x(y) L#y'.
sp_before_pp_stringify      = ignore    # ignore/add/remove/force


# Template
# --------------------------------------------------------------------------------------------------

# Add or remove space in 'template <' vs 'template<'.
# If set to ignore, sp_before_angle is used.
sp_template_angle   = add     # ignore/add/remove/force

# Add or remove space before '<>'
sp_before_angle     = remove  # ignore/add/remove/force

# Add or remove space inside '<' and '>'
sp_inside_angle     = remove  # ignore/add/remove/force

# Add or remove space after '<>'
sp_after_angle      = add     # ignore/add/remove/force

# Add or remove space between '<>' and '(' as found in 'new List<byte>();'
sp_angle_paren      = remove  # ignore/add/remove/force

# Add or remove space between '<>' and a word as in 'List<byte> m;'
sp_angle_word       = add     # ignore/add/remove/force

# Add or remove space between '>' and '>' in '>>' (template stuff C++/C# only). Default=Add
sp_angle_shift      = add     # ignore/add/remove/force



